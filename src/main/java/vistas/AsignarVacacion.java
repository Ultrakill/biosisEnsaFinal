/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import com.personal.utiles.FormularioUtil;
import com.personal.utiles.ReporteUtil;
import controladores.CompraVacacionControlador;
import controladores.Controlador;
import controladores.EmpleadoControlador;
import controladores.InterrupcionControlador;
import controladores.PeriodoControlador;
import controladores.SaldoVacacionalControlador;
import controladores.TCAnalisisControlador;
import controladores.VacacionControlador;
import entidades.AsignacionPermiso;
import entidades.CompraVacacion;
import entidades.InterrupcionVacacion;
import entidades.Periodo;
import entidades.SaldoVacacional;
import entidades.TipoPermiso;
import entidades.Vacacion;
import entidades.escalafon.Empleado;
import java.awt.Component;
import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import principal.Main;
import utiles.UsuarioActivo;
import vistas.dialogos.DlgEmpleado;
import vistas.dialogos.DlgInterrupcionVacacion;
import vistas.dialogos.DlgReprogramarVacacion;
import vistas.modelos.MTAsignarVacacion;
import vistas.modelos.MTMostrarPeriodos;
import vistas.modelos.MTVacacion;

/**
 *
 * @author fesquivelc
 */
public class AsignarVacacion extends javax.swing.JInternalFrame {

    /**
     * Creates new form CRUDPeriodo
     */
    private List<Vacacion> listado;
    private List<Empleado> integrantes;
    private VacacionControlador controlador;
    private EmpleadoControlador ec;
    private int accion;
    private TipoPermiso tipoSeleccionado;
    private Empleado empleadoBusqueda;
    private Empleado empleadoSeleccionado;
    private PeriodoControlador pc;
    private final ReporteUtil reporteador;
    //
    private Periodo periodo;
    private String empleado;

    public AsignarVacacion() {
        initComponents();
        jLabel2.setVisible(false);
        cboPeriodo.setVisible(false);
        reporteador = new ReporteUtil();
        inicializar();
        bindeoSalvaje();

        tbList.setEnabledAt(0, true);
        tbList.setEnabledAt(1, false);
//        tbList.getTabComponentAt(1).setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tbList = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        pnlListado = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabla = new org.jdesktop.swingx.JXTable();
        lblBusqueda = new org.jdesktop.swingx.JXBusyLabel();
        txtEmpleado = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        pnlNavegacion = new javax.swing.JPanel();
        btnPrimero = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        spPagina = new javax.swing.JSpinner();
        txtTotal = new javax.swing.JTextField();
        btnSiguiente = new javax.swing.JButton();
        btnUltimo = new javax.swing.JButton();
        cboTamanio = new javax.swing.JComboBox();
        dcFechaInicio1 = new com.toedter.calendar.JDateChooser();
        dcFechaFin1 = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        pnlDatos = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtEmpleadoSeleccionado = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pnlFHInicio = new javax.swing.JPanel();
        dcFechaFin = new com.toedter.calendar.JDateChooser();
        pnlFHInicio1 = new javax.swing.JPanel();
        dcFechaInicio = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cboPeriodo = new javax.swing.JComboBox();
        txtDocumento = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        pnlVacacionesPedidas = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtLV = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtSab = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDom = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtSaldo = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPeriodos = new org.jdesktop.swingx.JXTable();
        jLabel12 = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setTitle("ASIGNAR VACACIONES A EMPLEADO");

        jPanel1.setLayout(new java.awt.GridBagLayout());

        pnlListado.setBorder(javax.swing.BorderFactory.createTitledBorder("Vacaciones asignadas"));
        pnlListado.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnNuevo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel3.add(btnNuevo);

        btnModificar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel3.add(btnModificar);

        jButton6.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jButton6.setText("Eliminar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton6);

        jButton3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jButton3.setText("Imprimir boleta");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3);

        jButton2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jButton2.setText("Interrupci√≥n");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        jButton5.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jButton5.setText("Reprogramar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton5);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 15;
        pnlListado.add(jPanel3, gridBagConstraints);

        tblTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblTablaMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblTabla);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        pnlListado.add(jScrollPane1, gridBagConstraints);

        lblBusqueda.setText("Empleado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(lblBusqueda, gridBagConstraints);

        txtEmpleado.setEditable(false);
        txtEmpleado.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpleadoKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        pnlListado.add(txtEmpleado, gridBagConstraints);

        jButton4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jButton4.setText("...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(jButton4, gridBagConstraints);

        btnLimpiar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(btnLimpiar, gridBagConstraints);

        jLabel9.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(jLabel9, gridBagConstraints);

        btnBuscar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlListado.add(btnBuscar, gridBagConstraints);

        pnlNavegacion.setLayout(new java.awt.GridLayout(1, 0, 2, 0));

        btnPrimero.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnPrimero.setText("<<");
        btnPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeroActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnPrimero);

        btnAnterior.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnAnterior.setText("<");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnAnterior);

        spPagina.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        spPagina.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spPagina.setMinimumSize(new java.awt.Dimension(60, 20));
        spPagina.setPreferredSize(new java.awt.Dimension(60, 20));
        spPagina.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spPaginaStateChanged(evt);
            }
        });
        pnlNavegacion.add(spPagina);

        txtTotal.setEditable(false);
        txtTotal.setColumns(3);
        txtTotal.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setText("1");
        pnlNavegacion.add(txtTotal);

        btnSiguiente.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnSiguiente.setText(">");
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnSiguiente);

        btnUltimo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnUltimo.setText(">>");
        btnUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUltimoActionPerformed(evt);
            }
        });
        pnlNavegacion.add(btnUltimo);

        cboTamanio.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cboTamanio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "25", "40", "50" }));
        cboTamanio.setMinimumSize(new java.awt.Dimension(53, 24));
        cboTamanio.setPreferredSize(new java.awt.Dimension(53, 24));
        cboTamanio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTamanioActionPerformed(evt);
            }
        });
        pnlNavegacion.add(cboTamanio);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 15;
        pnlListado.add(pnlNavegacion, gridBagConstraints);

        dcFechaInicio1.setDateFormatString("dd.MM.yyyy");
        dcFechaInicio1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        pnlListado.add(dcFechaInicio1, gridBagConstraints);

        dcFechaFin1.setDateFormatString("dd.MM.yyyy");
        dcFechaFin1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 0;
        pnlListado.add(dcFechaFin1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(pnlListado, gridBagConstraints);

        tbList.addTab("Vacaciones", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        pnlDatos.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de vacaci√≥n"));
        pnlDatos.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel1.setText("Empleado:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel1, gridBagConstraints);

        txtEmpleadoSeleccionado.setEditable(false);
        txtEmpleadoSeleccionado.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtEmpleadoSeleccionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpleadoSeleccionadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        jPanel4.add(txtEmpleadoSeleccionado, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel4.setText("Fecha de fin:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel4, gridBagConstraints);

        pnlFHInicio.setLayout(new java.awt.GridBagLayout());

        dcFechaFin.setDateFormatString("dd.MM.yyyy");
        dcFechaFin.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        pnlFHInicio.add(dcFechaFin, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(pnlFHInicio, gridBagConstraints);

        pnlFHInicio1.setLayout(new java.awt.GridBagLayout());

        dcFechaInicio.setDateFormatString("dd.MM.yyyy");
        dcFechaInicio.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        pnlFHInicio1.add(dcFechaInicio, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(pnlFHInicio1, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel7.setText("Fecha de inicio:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel7, gridBagConstraints);

        jButton1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jButton1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel2.setText("Per√≠odo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel2, gridBagConstraints);

        cboPeriodo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cboPeriodo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboPeriodoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(cboPeriodo, gridBagConstraints);

        txtDocumento.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(txtDocumento, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel5.setText("Documento de vacaci√≥n:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 23;
        jPanel4.add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel6.setText("Vacaciones pedidas:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel6, gridBagConstraints);
        jLabel6.setVisible(false);

        pnlVacacionesPedidas.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel3.setText("LUNES - VIERNES:");
        pnlVacacionesPedidas.add(jLabel3, new java.awt.GridBagConstraints());

        txtLV.setColumns(2);
        txtLV.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtLV.setText("0");
        pnlVacacionesPedidas.add(txtLV, new java.awt.GridBagConstraints());

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel8.setText("SAB:");
        pnlVacacionesPedidas.add(jLabel8, new java.awt.GridBagConstraints());

        txtSab.setColumns(2);
        txtSab.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtSab.setText("0");
        pnlVacacionesPedidas.add(txtSab, new java.awt.GridBagConstraints());

        jLabel10.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel10.setText("DOM:");
        pnlVacacionesPedidas.add(jLabel10, new java.awt.GridBagConstraints());

        txtDom.setColumns(2);
        txtDom.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtDom.setText("0");
        pnlVacacionesPedidas.add(txtDom, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(pnlVacacionesPedidas, gridBagConstraints);
        pnlVacacionesPedidas.setVisible(false);

        jLabel11.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel11.setText("Saldo Vacacional:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(jLabel11, gridBagConstraints);
        jLabel11.setVisible(false);

        txtSaldo.setColumns(2);
        txtSaldo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtSaldo.setText("30");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel4.add(txtSaldo, gridBagConstraints);
        txtSaldo.setVisible(false);

        jPanel5.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnGuardar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel5.add(btnGuardar);

        btnCancelar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel5.add(btnCancelar);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 29;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weighty = 0.1;
        jPanel4.add(jPanel5, gridBagConstraints);

        tblPeriodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblPeriodos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblPeriodosMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblPeriodos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 15;
        gridBagConstraints.gridheight = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(9, 0, 6, 0);
        jPanel4.add(jScrollPane3, gridBagConstraints);

        jLabel12.setText("Seleccionar Periodo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel4.add(jLabel12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlDatos.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(pnlDatos, gridBagConstraints);

        tbList.addTab("Asignaciones", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbList, javax.swing.GroupLayout.DEFAULT_SIZE, 953, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tbList, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        this.accion = Controlador.NUEVO;
        controlador.prepararCrear();
        this.controles(accion);
        integrantes.clear();
//        tbList.getTabComponentAt(1).setVisible(true);
        tbList.setEnabledAt(1, true);
        tbList.setEnabledAt(0, false);
        tbList.setSelectedIndex(1);

    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            this.accion = Controlador.MODIFICAR;
            controlador.setSeleccionado(this.listado.get(fila));
            periodo = periodoList.get(cboPeriodo.getSelectedIndex());
            empleado = empleadoSeleccionado.getNroDocumento();
            if (empleado == null) {
                System.out.println("Corregir aca carajo!");
            }
            this.controles(accion);
            FormularioUtil.activarComponente(txtEmpleadoSeleccionado, false);
            
//            tbList.getTabComponentAt(1).setVisible(true);
            tbList.setEnabledAt(1, true);
            tbList.setEnabledAt(0, false);
            tbList.setSelectedIndex(1);
        }

    }//GEN-LAST:event_btnModificarActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            if (JOptionPane.showConfirmDialog(null, "¬øDesea Eliminar el Item?", "Mensaje del Sistema", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                this.accion = Controlador.ELIMINAR;

                controlador.setSeleccionado(this.listado.get(fila));
                Vacacion vacacion = this.listado.get(fila);
                listado.remove(vacacion);
                controlador.accion(accion);
                actualizarTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Item no eliminado", "Mensaje del Sistema", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un Item", "Mensaje del Sistema", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            Vacacion vacacion = this.listado.get(fila);
            this.imprimirBoleta(vacacion);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            Vacacion vacacion = this.listado.get(fila);
            DlgInterrupcionVacacion interrupcion = new DlgInterrupcionVacacion(this, vacacion);
            interrupcion.setVisible(true);
            this.buscarVacacion();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            Vacacion vacacion = this.listado.get(fila);
            DlgReprogramarVacacion reprogramar = new DlgReprogramarVacacion(this, vacacion);
            reprogramar.setVisible(true);
            this.buscarVacacion();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void tblTablaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTablaMouseReleased
        // TODO add your handling code here:
        int fila = tblTabla.getSelectedRow();
        if (fila != -1) {
            Vacacion vacacion = listado.get(fila);

            mostrar(vacacion);
        }
    }//GEN-LAST:event_tblTablaMouseReleased

    private void txtEmpleadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpleadoKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            lblBusqueda.setBusy(true);
            buscar();
            lblBusqueda.setBusy(false);
        }
    }//GEN-LAST:event_txtEmpleadoKeyReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        DlgEmpleado dialogo = new DlgEmpleado(this);
        this.empleadoBusqueda = dialogo.getSeleccionado();
        if (this.empleadoBusqueda != null) {
            this.txtEmpleado.setText(
                    empleadoBusqueda.getNroDocumento()
                    + " " + empleadoBusqueda.getPaterno()
                    + " " + empleadoBusqueda.getMaterno()
                    + " " + empleadoBusqueda.getNombre());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        FormularioUtil.limpiarComponente(this.txtEmpleado);
        this.empleadoBusqueda = null;
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        buscarVacacion();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeroActionPerformed
        // TODO add your handling code here:
        primero();
    }//GEN-LAST:event_btnPrimeroActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        // TODO add your handling code here:
        anterior();
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void spPaginaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spPaginaStateChanged
        // TODO add your handling code here:
        this.seleccionPagina();
    }//GEN-LAST:event_spPaginaStateChanged

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // TODO add your handling code here:
        siguiente();
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUltimoActionPerformed
        // TODO add your handling code here:
        ultimo();
    }//GEN-LAST:event_btnUltimoActionPerformed

    private void cboTamanioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTamanioActionPerformed
        // TODO add your handling code here:
        this.paginaActual = 1;
        buscar();
        this.actualizarControlesNavegacion();
    }//GEN-LAST:event_cboTamanioActionPerformed

    private void txtEmpleadoSeleccionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpleadoSeleccionadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpleadoSeleccionadoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DlgEmpleado dialogo = new DlgEmpleado(this);
        empleadoSeleccionado = dialogo.getSeleccionado();
        if (empleadoSeleccionado != null) {
            txtEmpleadoSeleccionado.setText(
                    empleadoSeleccionado.getPaterno()
                    + " " + empleadoSeleccionado.getMaterno()
                    + " " + empleadoSeleccionado.getNombre());
            actualizarResumenVacaciones(empleadoSeleccionado);
            bindeoSalvaje2();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        if (erroresFormulario()) {
            return;
        }
        if (FormularioUtil.dialogoConfirmar(this, accion)) {
            Vacacion seleccionada = this.controlador.getSeleccionado();

            //            FormularioUtil.convertirMayusculas(this.pnlDatos);
            if (accion == Controlador.NUEVO) {
                seleccionada.setEmpleado(empleadoSeleccionado);
            }
            if (seleccionada.getEmpleado() != null) {
                System.out.println("Hay empleado");
            } else {
                System.out.println("No hay empleado");
            }
            //            if(accion == Controlador.MODIFICAR){
            //                seleccionada.setEmpleado(empleado);
            //            }
            seleccionada.setFechaInicio(dcFechaInicio.getDate());
            seleccionada.setFechaFin(dcFechaFin.getDate());
            seleccionada.setHayInterrupcion(false);
            seleccionada.setDocumento(txtDocumento.getText());

            //Asignacion del periodo de donde se obtendran los dias.
            int filaPeriodos = tblPeriodos.getSelectedRow();
            if (filaPeriodos != -1) {
                String[] periodoTabla = lista.get(filaPeriodos);
                System.out.println("Periodo: " + periodoTabla[2].substring(0, 4));
                int numPeriodo = Integer.parseInt(periodoTabla[2].substring(0, 4));
                Periodo periodoObtenido = pc.buscarPeriodoxAnio(numPeriodo).get(0);

//                long diferencia = dcFechaFin.getDate().getTime() - dcFechaInicio.getDate().getTime();
//                int diferenciaDias = (int) (diferencia / (1000 * 60 * 60 * 24));
//
//                int diasDisponibles = Integer.parseInt(periodoTabla[4]);
//
//                if (diasDisponibles >= diferenciaDias) {
                pc.setSeleccionado(periodoObtenido);
//                } else {
//
//                }

            }

            seleccionada.setPeriodo(pc.getSeleccionado());

            if (controlador.accion(accion)) {
                List<String> dni = new ArrayList<>();
                dni.add(seleccionada.getEmpleado().getNroDocumento());
                retrocederTiempo(dni, seleccionada.getFechaInicio());
                SaldoVacacional sv = buscarCrear(empleadoSeleccionado, seleccionada.getPeriodo());
                int[] saldos = obtenerSaldos(empleadoSeleccionado, seleccionada.getPeriodo());
                sv.setDiasRestantes(30 - (saldos[0] + saldos[1] + saldos[2]));
                sv.setLunesViernes(saldos[0]);
                sv.setSabado(saldos[1]);
                sv.setDomingo(saldos[2]);
                svc.modificar(sv);

                FormularioUtil.mensajeExito(this, accion);
                System.out.println("SELECCION: " + seleccionada.getId());
                this.accion = 0;
//                FormularioUtil.limpiarComponente(this.pnlDatos);
                this.controles(accion);
                this.actualizarTabla();
                if (FormularioUtil.dialogoConfirmar(this, 4)) {
                    imprimirBoleta(seleccionada);
                }
            } else {
                FormularioUtil.mensajeError(this, accion);
            }
//            tbList.getTabComponentAt(1).setVisible(false);
            tbList.setEnabledAt(0, true);
            tbList.setEnabledAt(1, false);
//            tbList.setSelectedIndex(0);
//            lista.clear();
            bindeoSalvaje2();
            FormularioUtil.activarComponente(btnCancelar, true);
            FormularioUtil.activarComponente(btnGuardar, true);

        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.accion = 0;
        this.controles(accion);
        FormularioUtil.limpiarComponente(this.pnlDatos);
        tbList.setEnabledAt(0, true);
//        tbList.getTabComponentAt(1).setVisible(false);
        tbList.setEnabledAt(1, false);
        tbList.setSelectedIndex(0);
        if(lista != null){
            lista.clear();
        }
        
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void tblPeriodosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPeriodosMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tblPeriodosMouseReleased

    private void cboPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboPeriodoActionPerformed
        // TODO add your handling code here:
        actualizarResumenVacaciones(empleadoSeleccionado);
    }//GEN-LAST:event_cboPeriodoActionPerformed

    private final TCAnalisisControlador tcac = new TCAnalisisControlador();

    private void retrocederTiempo(List<String> dnis, Date fechaInicio) {
        tcac.retrocederTiempo(dnis, fechaInicio);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnPrimero;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JButton btnUltimo;
    private javax.swing.JComboBox cboPeriodo;
    private javax.swing.JComboBox cboTamanio;
    private com.toedter.calendar.JDateChooser dcFechaFin;
    private com.toedter.calendar.JDateChooser dcFechaFin1;
    private com.toedter.calendar.JDateChooser dcFechaInicio;
    private com.toedter.calendar.JDateChooser dcFechaInicio1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXBusyLabel lblBusqueda;
    private javax.swing.JPanel pnlDatos;
    private javax.swing.JPanel pnlFHInicio;
    private javax.swing.JPanel pnlFHInicio1;
    private javax.swing.JPanel pnlListado;
    private javax.swing.JPanel pnlNavegacion;
    private javax.swing.JPanel pnlVacacionesPedidas;
    private javax.swing.JSpinner spPagina;
    private javax.swing.JTabbedPane tbList;
    private org.jdesktop.swingx.JXTable tblPeriodos;
    private org.jdesktop.swingx.JXTable tblTabla;
    private javax.swing.JTextField txtDocumento;
    private javax.swing.JTextField txtDom;
    private javax.swing.JTextField txtEmpleado;
    private javax.swing.JTextField txtEmpleadoSeleccionado;
    private javax.swing.JTextField txtLV;
    private javax.swing.JTextField txtSab;
    private javax.swing.JTextField txtSaldo;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void mostrar(Vacacion vacacion) {
        Empleado e = vacacion.getEmpleado();
        txtEmpleadoSeleccionado.setText(e.getNombreCompleto());
        dcFechaInicio.setDate(vacacion.getFechaInicio());
        dcFechaFin.setDate(vacacion.getFechaFin());
        cboPeriodo.setSelectedItem(vacacion.getPeriodo());
        txtDocumento.setText(vacacion.getDocumento());
        cargarSaldoVacacional(vacacion.getPeriodo(), e);
//        actualizarResumenVacaciones(e);

    }

    private List<Periodo> periodoList;

    private void bindeoSalvaje() {
        listado = new ArrayList<>();
        listado = ObservableCollections.observableList(listado);
        periodoList = pc.buscarTodosOrden();

        integrantes = ObservableCollections.observableList(new ArrayList<Empleado>());

//        String[] columnasIntegrantes = {"Nro Documento", "Empleado"};
        JComboBoxBinding bindingPeriodo = SwingBindings.createJComboBoxBinding(AutoBinding.UpdateStrategy.READ, periodoList, cboPeriodo);

        bindingPeriodo.bind();

        MTAsignarVacacion mt = new MTAsignarVacacion(listado);
//        MTEmpleado mtIntegrantes = new MTEmpleado(integrantes, columnasIntegrantes);
        tblTabla.setModel(mt);
//        tblTabla.setModel(mtIntegrantes);

        cboPeriodo.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if (value instanceof Periodo) {
                    value = ((Periodo) value).getAnio();
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }

        });

        actualizarTabla();
    }

    List<String[]> lista;

    private void bindeoSalvaje2() {
        lista = new ArrayList<>();
        lista = ObservableCollections.observableList(lista);
//        periodoList = pc.buscarTodosOrden();

        integrantes = ObservableCollections.observableList(new ArrayList<Empleado>());

//        String[] columnasIntegrantes = {"Nro Documento", "Empleado"};
//        JComboBoxBinding bindingPeriodo = SwingBindings.createJComboBoxBinding(AutoBinding.UpdateStrategy.READ, periodoList, cboPeriodo);
//        bindingPeriodo.bind();
        crearPeriodos(empleadoSeleccionado);
        MTMostrarPeriodos mt = new MTMostrarPeriodos(lista);
//        MTEmpleado mtIntegrantes = new MTEmpleado(integrantes, columnasIntegrantes);
        tblPeriodos.setModel(mt);
//        tblTabla.setModel(mtIntegrantes);

//        cboPeriodo.setRenderer(new DefaultListCellRenderer() {
//
//            @Override
//            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
//                if (value instanceof Periodo) {
//                    value = ((Periodo) value).getAnio();
//                }
//                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
//            }
//
//        });
//        actualizarTabla();
    }

    InterrupcionControlador ic = new InterrupcionControlador();

    private void crearPeriodos(Empleado empleado) {

        //Creamos la lista que tendr√° los datos de los periodos del empleado
        String[] fila;
        Date inicio = empleado.getContratoList().get(0).getFechaInicio();

        //Guardamos la fecha pivot, que es la fecha de inicio de contrato.
        Calendar inicioPeriodo = Calendar.getInstance();
        inicioPeriodo.setTime(inicio);

        Calendar inicioContrato = Calendar.getInstance();
        inicioContrato.setTime(inicio);

        //Fecha a comparar para obetener las listas de vacaciones entre rangos.
        Calendar suma = Calendar.getInstance();
        suma.setTime(inicio);
//                suma.add(Calendar.YEAR, 1);

        //Fecha actual hasta la que realizamos la consulta.
        Date fechaActual = new Date();
        Calendar actual = Calendar.getInstance();
        actual.setTime(fechaActual);

        VacacionControlador vacaciones = new VacacionControlador();

        //Variables para las consultas de rangos.
        Calendar fechaInicio = Calendar.getInstance();
        fechaInicio.setTime(inicio);

//        Date fInicio = inicioPeriodo.getTime();
//        Date fFin;
        Calendar parametro1 = Calendar.getInstance();
        Calendar parametro2 = Calendar.getInstance();
        boolean flag = false;

        //Loop principal para analizar periodo por periodo todas las vacaciones.
        for (int i = inicioPeriodo.get(Calendar.YEAR); i <= actual.get(Calendar.YEAR); i++) {
            fila = new String[5];

            //Obetenemos los primeros datos que son repetitivos en las filas.
            fila[0] = empleado.getFichaLaboral().getCodigoTrabajador();
            fila[1] = empleado.getNombreCompleto();

            //Se suma 1 al a√±o para calcular el primer periodo y asi sucesivamente.
            if (i != actual.get(Calendar.YEAR)) {
                suma.set(Calendar.YEAR, i + 1);
                if (i == fechaInicio.get(Calendar.YEAR)) {
                    i = i + 1;
                }
                if (i + 1 == actual.get(Calendar.YEAR)) {
                    flag = true;
                }
            } else {

                if (inicioContrato.get(Calendar.DAY_OF_YEAR) > actual.get(Calendar.DAY_OF_YEAR)) {
                    break;
//                    menor = true;
                }
            }
//            fFin = suma.getTime();

            System.out.println("Inicio analisis: " + i + " - Fin analisis: " + suma.get(Calendar.YEAR));

            System.out.println("periodo analizado: " + i + " - Periodo Actual: " + actual.get(Calendar.YEAR) + " - Dia del a√±o del contrato: " + inicioPeriodo.get(Calendar.DAY_OF_YEAR) + " - Dia del a√±o Actual: " + actual.get(Calendar.DAY_OF_YEAR));
            //Preguntamos si esta en e ultimo a√±o del calculo para saber si la fecha es posterior a la de su contrato (en mes - dia)
//            if (i == actual.get(Calendar.YEAR) && actual.get(Calendar.DAY_OF_YEAR) > inicioPeriodo.get(Calendar.DAY_OF_YEAR)) {
//
//                long saldo = 30;
//                inicioPeriodo.set(Calendar.YEAR, i);
//
//                //Obtenemos todas las vacaciones del rango de fechas
//                List<Vacacion> vac = vacaciones.buscarXEmpleadoEntreFecha(empleado, inicioPeriodo.getTime(), actual.getTime());
//                long saldoARestar = 0;
//
//                //Si es que hay vacaciones para analizar, obtenemos cuanto representan en dias.
//                if (vac != null) {
//
//                    for (Vacacion listaDias : vac) {
//                        long diferencia = listaDias.getFechaFin().getTime() - listaDias.getFechaInicio().getTime();
//                        long dias = diferencia / (1000 * 60 * 60 * 24);
//                        saldoARestar = saldoARestar + dias;
//
//                    }
//                    saldo = saldo - saldoARestar;
//                }
//
//                fila[2] = (i + 1) + " - " + (i + 2);
//                fila[3] = saldoARestar + "";
//                fila[4] = saldo + "";
//                lista.add(fila);
//
//                //Esta es la parte del algoritmo que mas se repite, de la misma forma calcula en dias las vacaciones gozadas.
//            } else 
//                if (i != actual.get(Calendar.YEAR)) {

            parametro1.setTime(inicioPeriodo.getTime());
            parametro2.setTime(suma.getTime());

            long saldo = 30;
            
            //CALCULAMOS LOS DIAS DISPONIBLES EN EL ULTIMO A√ëO.
            if (flag) {
                System.out.println("ENTRO ULTIMO A√ëO");
                int diasTranscurridos = actual.get(Calendar.DAY_OF_YEAR);
                int operacion = (diasTranscurridos * 30) / 365;
                saldo = operacion;
                flag = false;
            }
            Periodo periodoObtenido = pc.buscarPeriodoxAnio(inicioPeriodo.get(Calendar.YEAR)).get(0);
            List<Vacacion> vac = vacaciones.buscarXPeriodoxEmpleado(periodoObtenido, empleado);
            long saldoARestar = 0;
            long interrupcionRestar = 0;
            if (vac != null) {

                

                for (Vacacion listaDias : vac) {
                    if (listaDias.isHayInterrupcion()) {
//                        long diasInterrupcionSuma = 0;
                        
                        List<InterrupcionVacacion> interrupciones = ic.buscarInterrupcion(listaDias);
                        
                        for (InterrupcionVacacion interrupcion : interrupciones) {

                            long diferencia = interrupcion.getFechaFin().getTime() - interrupcion.getFechaInicio().getTime();
                            long diasInterrupcion = (diferencia) / (1000 * 60 * 60 * 24);
                            diasInterrupcion = diasInterrupcion + 1;
                            interrupcionRestar = interrupcionRestar + diasInterrupcion;
                        }
                    }
                    long diferencia = listaDias.getFechaFin().getTime() - listaDias.getFechaInicio().getTime();
                    long dias = (diferencia) / (1000 * 60 * 60 * 24);
                    dias = dias + 1;
                    saldoARestar = saldoARestar + (dias);

                }
                saldo = saldo - saldoARestar + interrupcionRestar;
            }

            fila[2] = i + " - " + (i + 1);
            fila[3] = (saldoARestar - interrupcionRestar)+"";
            fila[4] = saldo + "";
            lista.add(fila);

//            }
            //A√±adimos anuestra lista la fila con la informacion trabajada.
            //La fecha inicial toma los valores del a√±o +1 para calcular el siguiente periodo y asi sucesivamente.
            inicioPeriodo.set(Calendar.YEAR, i + 1);
//            fInicio = inicioPeriodo.getTime();

        }

    }

    private void actualizarTabla() {
        listado.clear();
        empleadoBusqueda = null;
        FormularioUtil.limpiarComponente(txtEmpleado);
        paginaActual = 1;
        buscar();
        actualizarControlesNavegacion();
        tblTabla.packAll();
    }

    private void mostrarIntegrantes(List<String> listadoDNI) {
        integrantes.clear();
        integrantes.addAll(ec.buscarPorLista(listadoDNI));
        tblTabla.packAll();
    }

    private void inicializar() {
        this.tblTabla.setHorizontalScrollEnabled(true);
        this.accion = 0;
        ec = new EmpleadoControlador();
        controlador = new VacacionControlador();
        pc = new PeriodoControlador();
//        FormularioUtil.modeloSpinnerFechaHora(dcFechaInicio, "dd/MM/yyyy");
//        FormularioUtil.modeloSpinnerFechaHora(FechaFin, "dd/MM/yyyy");
//        FormularioUtil.modeloSpinnerFechaHora(spFechaInicio1, "dd/MM/yyyy");
//        FormularioUtil.modeloSpinnerFechaHora(spFechaFin1, "dd/MM/yyyy");
        this.controles(accion);
//        mtVac = new MTVacacion(new ArrayList<Vacacion>());
//        tblVacaciones.setModel(mtVac);
    }

    private void controles(int accion) {
        boolean bandera = accion == Controlador.NUEVO || accion == Controlador.MODIFICAR;

        FormularioUtil.activarComponente(this.pnlListado, !bandera);
        FormularioUtil.activarComponente(this.pnlDatos, bandera);
        FormularioUtil.activarComponente(this.pnlVacacionesPedidas, false);
        FormularioUtil.activarComponente(this.txtSaldo, false);
        FormularioUtil.activarComponente(this.txtEmpleado, false);
        FormularioUtil.activarComponente(this.txtEmpleadoSeleccionado, false);

        if (accion != Controlador.MODIFICAR) {
            FormularioUtil.limpiarComponente(this.pnlDatos);

        }
    }

//    private List<String> obtenerListadoDNI(List<AsignacionPermiso> detalles) {
//        List<String> listadoDNI = new ArrayList<>();
//        for (AsignacionPermiso detalle : detalles) {
//            listadoDNI.add(detalle.getEmpleado());
//        }
//        return listadoDNI;
//    }
    private MTVacacion mtVac;

//    public void agregarEmpleado(Empleado empleado) {
//        integrantes.add(empleado);
//
//        AsignacionPermiso detalle = new AsignacionPermiso();
//        detalle.setEmpleado(empleado.getNroDocumento());
//        detalle.setPermiso(controlador.getSeleccionado());
//
//        controlador.getSeleccionado().getAsignacionPermisoList().add(detalle);
//    }
//    private void quitarEmpleado(int fila) {
//        integrantes.remove(fila);
//        controlador.getSeleccionado().getAsignacionPermisoList().remove(fila);
//    }
    private int paginaActual = 1;
    private int totalPaginas = 0;
    private int tamanioPagina = 0;

    private void buscar() {
        String busqueda = txtEmpleado.getText();
        tamanioPagina = Integer.parseInt(cboTamanio.getSelectedItem().toString());

        Date fechaInicio = dcFechaInicio1.getDate();
        Date fechaFin = dcFechaFin1.getDate();
        listado.clear();
        List<Vacacion> lista = this.listar(empleadoBusqueda, fechaInicio, fechaFin, paginaActual, tamanioPagina);
        System.out.println("EMPLEADO: " + empleadoBusqueda);
        System.out.println("LISTA: " + lista.size());
        listado.addAll(lista);

        tblTabla.packAll();
    }

    private List<Vacacion> listar(Empleado empleado, Date fechaInicio, Date fechaFin, int pagina, int tamanio) {
        int total;

        if (empleado == null) {
            total = controlador.contarXFecha(fechaInicio, fechaFin);
        } else {
            total = controlador.contarXEmpleadoXFecha(empleado, fechaInicio, fechaFin);
        }

        if (total % tamanio == 0) {
            totalPaginas = total / tamanio;
        } else {
            totalPaginas = (total / tamanio) + 1;
        }

        if (totalPaginas == 0) {
            totalPaginas = 1;
        }

        if (empleado == null) {
            return controlador.buscarXFecha(fechaInicio, fechaFin, (pagina - 1) * tamanio, tamanio);
        } else {
            return controlador.buscarXEmpleadoXFecha(empleado, fechaInicio, fechaFin, (pagina - 1) * tamanio, tamanio);
        }

    }

    private void siguiente() {
        paginaActual++;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void ultimo() {
        paginaActual = totalPaginas;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void primero() {
        paginaActual = 1;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void anterior() {
        paginaActual--;
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void seleccionPagina() {
        paginaActual = (int) spPagina.getValue();
        buscar();
        this.actualizarControlesNavegacion();
    }

    private void actualizarControlesNavegacion() {
        spPagina.setValue(paginaActual);
        txtTotal.setText(totalPaginas + "");

        SpinnerNumberModel modeloSP = (SpinnerNumberModel) spPagina.getModel();
        Comparable<Integer> maximo = totalPaginas;
        modeloSP.setMaximum(maximo);

        this.btnSiguiente.setEnabled(paginaActual != totalPaginas);
        this.btnUltimo.setEnabled(paginaActual != totalPaginas);

        this.btnAnterior.setEnabled(paginaActual != 1);
        this.btnPrimero.setEnabled(paginaActual != 1);
    }

    private void imprimirBoleta(Vacacion seleccionada) {
        File reporte = new File("reportes/reporte_papeleta_vacacion.jasper");
        Map<String, Object> parametros = new HashMap<>();
        parametros.put("vac_id", seleccionada.getId());
        parametros.put("reporte_institucion", Main.REPORTE_INSTITUCION);
        parametros.put("reporte_usuario", UsuarioActivo.getUsuario().getLogin());
        reporteador.setConn(controlador.getDao().getConexion());
        reporteador.generarReporte(reporte, parametros, JOptionPane.getFrameForComponent(this));

    }

    private void actualizarResumenVacaciones(Empleado empleado) {
        if (empleado != null && cboPeriodo.getSelectedIndex() != -1) {

            this.cargarSaldoVacacional((Periodo) cboPeriodo.getSelectedItem(), empleado);
        }
    }
    private final SaldoVacacionalControlador svc = new SaldoVacacionalControlador();

    private final Calendar calendar = Calendar.getInstance();

    public SaldoVacacional buscarCrear(Empleado empleado, Periodo periodo) {
        SaldoVacacional sv = svc.buscarXPeriodo(empleado, periodo);
        Date fechaContrato = empleado.getContratoList().get(0).getFechaInicio();
        calendar.setTime(fechaContrato);
        if (sv == null && periodo.getAnio() > calendar.get(Calendar.YEAR)) {
            //CREAMOS
            sv = new SaldoVacacional();
            //OBTENEMOS SI LE CORRESPONDEN VACACIONES ACORDE A LEY

            if (calendar.get(Calendar.YEAR) < periodo.getAnio()) {
                sv.setDiasRestantes(30);
            } else {
                sv.setDiasRestantes(0);
            }
            calendar.set(Calendar.YEAR, periodo.getAnio());
            sv.setFechaDesde(calendar.getTime());
            calendar.add(Calendar.YEAR, 1);
            sv.setFechaHasta(calendar.getTime());
            sv.setEmpleado(empleado);
            sv.setLunesViernes(0);
            sv.setSabado(0);
            sv.setDomingo(0);
            sv.setPeriodo(periodo);
            svc.modificar(sv);
        }
        sv = svc.buscarXPeriodo(empleado, periodo);
        return sv;
    }

    private boolean erroresFormulario() {
        int errores = 0;
        Date fechaInicio = dcFechaInicio.getDate();
        int fila = tblPeriodos.getSelectedRow();

        String mensaje = "";

        Date fechaFin = dcFechaFin.getDate();
        if (fechaInicio.compareTo(fechaFin) > 0) {
            errores++;
            mensaje = ">La fecha de inicio debe ser menor que la fecha de fin\n";
        }

        if (fila == -1) {
            errores++;
            mensaje = ">No ha seleccionado ning√∫n periodo\n";
        }

        int filaPeriodos = tblPeriodos.getSelectedRow();
        if (filaPeriodos != -1) {
            String[] periodoTabla = lista.get(filaPeriodos);

            long diferencia = dcFechaFin.getDate().getTime() - dcFechaInicio.getDate().getTime();
            int diferenciaDias = (int) (diferencia / (1000 * 60 * 60 * 24));

            int diasDisponibles = Integer.parseInt(periodoTabla[4]);

            if (diasDisponibles < diferenciaDias) {
                errores++;
                mensaje = ">Saldo de dias disponibles insuficiente\n";
            }

        }
//        //Traemos los dnis de los empleados
////        String empleadoPrueba = this.controlador.getSeleccionado().getEmpleado();
////        System.out.println(empleadoPrueba);
//        Vacacion paraComprobar = this.controlador.getSeleccionado();
//        if(paraComprobar != null){
//            System.out.println("No es null"+paraComprobar.getEmpleado());
//        }
//        //aSystem.out.println("dni" + empleadoPrueba.getNroDocumento());
//        //Permiso paraComprobar = this.controlador.getSeleccionado();
//        List<Vacacion> vacaciones = controlador.buscarXEmpleadoXPeriodo(paraComprobar.getEmpleado(), periodoList.get(cboPeriodo.getSelectedIndex()));
//        for (Vacacion vacacion : vacaciones) {
//            if((vacacion.getFechaInicio().compareTo(fechaInicio) == 0) || 
//               (vacacion.getFechaInicio().compareTo(fechaInicio) < 0) || 
//               (vacacion.getFechaFin().compareTo(fechaFin) == 0) ||
//               (vacacion.getFechaFin().compareTo(fechaFin) > 0 )    ){
//               errores++;
//               mensaje = "El empleado "+vacacion.getEmpleado()+" tiene conflicto con una vacaci√≥n a√±adida anteriormente \n Ingrese otro rango de fechas \n";
//               break;
//            }    
//        }
//            

        if (errores > 0) {
            JOptionPane.showMessageDialog(this, "Se ha(n) encontrado el(los) siguiente(s) error(es):\n" + mensaje, "Mensaje del sistema", JOptionPane.ERROR_MESSAGE);
        }
        return errores != 0;
    }

    private final Calendar cal = Calendar.getInstance();

    private int[] obtenerSaldos(Empleado empleado, Periodo periodo) {
        List<Vacacion> vacaciones = controlador.buscarXEmpleadoXPeriodo(empleado, periodo);
        int[] saldo = new int[3];
        int lunesViernes = 0;
        int sabado = 0;
        int domingo = 0;

        if (vacaciones != null) {
            for (Vacacion vacacion : vacaciones) {
                Date fechaInicio = vacacion.getFechaInicio();
                Date fechaFin = vacacion.isHayInterrupcion() ? vacacion.getFechaInterrupcion() : vacacion.getFechaFin();

                while (fechaInicio.compareTo(fechaFin) <= 0) {
                    cal.setTime(fechaInicio);
                    if (cal.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY || cal.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
//                    sabadoADomingo++;
                    } else {
                        lunesViernes++;
                    }
                    cal.add(Calendar.DAY_OF_MONTH, 1);
                    fechaInicio = cal.getTime();
                }
            }
        }
        int division = lunesViernes / 5;
        sabado = division;
        domingo = division;

        saldo[0] = lunesViernes;
        saldo[1] = sabado;
        saldo[2] = domingo;
        return saldo;
    }

    private void cargarSaldoVacacional(Periodo periodo, Empleado empleado) {
        List<Vacacion> vacaciones = this.controlador.buscarXEmpleadoXPeriodoNoReprogramacion(empleado, periodo);
        Calendar iterador = Calendar.getInstance();
        int lunesViernes = 0;
        int sab = 0;
        int dom = 0;
        int saldo = 30;
//        List<CompraVacacion> compras = cmpvacc.buscarXEmpleadoXPeriodo(empleado, periodo);
//        for (CompraVacacion compra : compras) {
//            saldo -= compra.getDiasCompra();
//        }
        for (Vacacion vacacion : vacaciones) {
            iterador.setTime(vacacion.getFechaInicio());
            InterrupcionVacacion interrupcion = vacacion.getInterrupcionVacacion();
            while (iterador.getTime().compareTo(vacacion.getFechaFin()) <= 0) {
                if (interrupcion != null) {
                    if (interrupcion.getFechaInicio().compareTo(iterador.getTime()) <= 0
                            && interrupcion.getFechaFin().compareTo(iterador.getTime()) >= 0) {
                        //no pasa nada
                    } else if (iterador.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY
                            && iterador.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
                        lunesViernes++;
                    }
                } else if (iterador.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY
                        && iterador.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
                    lunesViernes++;
                }
                iterador.add(Calendar.DATE, 1);
            }
        }

        int division = lunesViernes / 5;
        sab = division;
        dom = division;

        saldo = saldo - (lunesViernes + sab + dom);

        txtLV.setText(lunesViernes + "");
        txtSab.setText(sab + "");
        txtDom.setText(dom + "");
        txtSaldo.setText(saldo + "");
    }

    private void buscarVacacion() {
        System.out.println("BUSCAR");
        lblBusqueda.setBusy(true);
        paginaActual = 1;
        buscar();
        actualizarControlesNavegacion();
        lblBusqueda.setBusy(false);
    }

    private final CompraVacacionControlador cmpvacc = CompraVacacionControlador.getInstance();
}
